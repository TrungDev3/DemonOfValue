/*
 * ConsenSys NFT Admin API
 *
 * @generated by <a href=\"https://consensys.net/nft/\">ConsenSys NFT</a>.
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Infura.SDK.Organization
{
    /// <summary>
    /// ListingOutput
    /// </summary>
    [DataContract(Name = "ListingOutput")]
    public class ListingOutput
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ListingOutput" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ListingOutput() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ListingOutput" /> class.
        /// </summary>
        /// <param name="collectionId">collectionId.</param>
        /// <param name="currency">currency (required).</param>
        /// <param name="endTime">endTime.</param>
        /// <param name="id">id (required).</param>
        /// <param name="itemId">itemId.</param>
        /// <param name="maxQuantityPerTx">maxQuantityPerTx (required).</param>
        /// <param name="paymentProviders">paymentProviders (required).</param>
        /// <param name="policy">policy (required).</param>
        /// <param name="price">Uint256 (required).</param>
        /// <param name="quantityListed">quantityListed (required).</param>
        /// <param name="quantityRemaining">quantityRemaining (required).</param>
        /// <param name="saleType">saleType (required).</param>
        /// <param name="startTime">startTime.</param>
        /// <param name="status">status (required).</param>
        public ListingOutput(Guid? collectionId = default(Guid?), string currency = default(string), DateTime? endTime = default(DateTime?), Guid id = default(Guid), Guid? itemId = default(Guid?), int maxQuantityPerTx = default(int), List<string> paymentProviders = default(List<string>), Object policy = default(Object), string price = default(string), int quantityListed = default(int), int quantityRemaining = default(int), string saleType = default(string), DateTime? startTime = default(DateTime?), string status = default(string))
        {
            // to ensure "currency" is required (not null)
            if (currency == null)
            {
                throw new ArgumentNullException("currency is a required property for ListingOutput and cannot be null");
            }
            this.Currency = currency;
            this.Id = id;
            this.MaxQuantityPerTx = maxQuantityPerTx;
            // to ensure "paymentProviders" is required (not null)
            if (paymentProviders == null)
            {
                throw new ArgumentNullException("paymentProviders is a required property for ListingOutput and cannot be null");
            }
            this.PaymentProviders = paymentProviders;
            // to ensure "policy" is required (not null)
            if (policy == null)
            {
                throw new ArgumentNullException("policy is a required property for ListingOutput and cannot be null");
            }
            this.Policy = policy;
            // to ensure "price" is required (not null)
            if (price == null)
            {
                throw new ArgumentNullException("price is a required property for ListingOutput and cannot be null");
            }
            this.Price = price;
            this.QuantityListed = quantityListed;
            this.QuantityRemaining = quantityRemaining;
            // to ensure "saleType" is required (not null)
            if (saleType == null)
            {
                throw new ArgumentNullException("saleType is a required property for ListingOutput and cannot be null");
            }
            this.SaleType = saleType;
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new ArgumentNullException("status is a required property for ListingOutput and cannot be null");
            }
            this.Status = status;
            this.CollectionId = collectionId;
            this.EndTime = endTime;
            this.ItemId = itemId;
            this.StartTime = startTime;
        }

        /// <summary>
        /// Gets or Sets CollectionId
        /// </summary>
        [DataMember(Name = "collection_id", EmitDefaultValue = true)]
        public Guid? CollectionId { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "currency", IsRequired = true, EmitDefaultValue = true)]
        public string Currency { get; set; }

        /// <summary>
        /// Gets or Sets EndTime
        /// </summary>
        [DataMember(Name = "end_time", EmitDefaultValue = true)]
        public DateTime? EndTime { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets ItemId
        /// </summary>
        [DataMember(Name = "item_id", EmitDefaultValue = true)]
        public Guid? ItemId { get; set; }

        /// <summary>
        /// Gets or Sets MaxQuantityPerTx
        /// </summary>
        [DataMember(Name = "max_quantity_per_tx", IsRequired = true, EmitDefaultValue = true)]
        public int MaxQuantityPerTx { get; set; }

        /// <summary>
        /// Gets or Sets PaymentProviders
        /// </summary>
        [DataMember(Name = "payment_providers", IsRequired = true, EmitDefaultValue = true)]
        public List<string> PaymentProviders { get; set; }

        /// <summary>
        /// Gets or Sets Policy
        /// </summary>
        [DataMember(Name = "policy", IsRequired = true, EmitDefaultValue = true)]
        public Object Policy { get; set; }

        /// <summary>
        /// Uint256
        /// </summary>
        /// <value>Uint256</value>
        [DataMember(Name = "price", IsRequired = true, EmitDefaultValue = true)]
        public string Price { get; set; }

        /// <summary>
        /// Gets or Sets QuantityListed
        /// </summary>
        [DataMember(Name = "quantity_listed", IsRequired = true, EmitDefaultValue = true)]
        public int QuantityListed { get; set; }

        /// <summary>
        /// Gets or Sets QuantityRemaining
        /// </summary>
        [DataMember(Name = "quantity_remaining", IsRequired = true, EmitDefaultValue = true)]
        public int QuantityRemaining { get; set; }

        /// <summary>
        /// Gets or Sets SaleType
        /// </summary>
        [DataMember(Name = "sale_type", IsRequired = true, EmitDefaultValue = true)]
        public string SaleType { get; set; }

        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        [DataMember(Name = "start_time", EmitDefaultValue = true)]
        public DateTime? StartTime { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public string Status { get; set; }
        
    }

}
